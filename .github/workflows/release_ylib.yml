name: ReleaseyLib
on:
  push:
    # Sequence of patterns matched against refs/heads
    tags:
      - 'V*'

jobs:
  prepare_release:
    name: prepare_release
    runs-on: ubuntu-latest
    outputs:
      YLIB_RELEASE_VERSION: ${{ steps.set_version.outputs.YLIB_RELEASE_VERSION }}
    steps:
    - name: set-version
      id: set_version
      # regx
      run: echo ::set-output name=YLIB_RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}
  
  full_source:
    needs: [prepare_release]
    name: full_source
    runs-on: ubuntu-latest
    steps:
    - name: check out my rep
      uses: actions/checkout@v4

    - name: package
      run: |
        rm -rf .git
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip

  generate-info:
    name: Generate Class Info
    uses: ./.github/workflows/class_info.yml

  linux_x64_gcc:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v4

    - name: set env and init
      run: |
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_x64_gcc.cmake \
                 -DBUILD_YLIB_ARCH=x86_64
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_x64_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=x86_64 -DENABLE_GNU_SANITIZER=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip    

  linux_x86_gcc:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_x64_gcc_m32.cmake
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_x64_gcc_m32.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=x86 -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip   



  linux_armeabi_gcc:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_armgnueabi_gcc.cmake
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_armgnueabi_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=armeabi -DENABLE_GNU_SANITIZER=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf        
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip    

  linux_armeabihf_gcc:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabihf
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_armgnueabihf_gcc.cmake
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_armgnueabihf_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=armeabihf -DENABLE_GNU_SANITIZER=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip     

  linux_aarch64_gcc:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install g++-aarch64-linux-gnu
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_aarch64_gcc.cmake
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/linux_aarch64_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=aarch64 -DENABLE_GNU_SANITIZER=OFF -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip     



  windows_vs2022_x86:
    needs: [prepare_release, generate-info]
    runs-on: windows-latest
    steps:
    - name: Checkout yLib
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Setup MSVC
      uses: microsoft/setup-msvc-dev@v1
      with:
        architecture: x86

    - name: Build Third-Party Dependencies (CMake)
      shell: cmd
      run: |
        cd third_part
        mkdir build_v143_x64 && cd build_v143_x64
        cmake .. -G "Visual Studio 17 2022" -A Win32 -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\third_part\build\install"
        cmake --build . --config Release

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      shell: cmd
      run: |
        mkdir build_vs2022_x86
        cp ${{ github.workspace }}\docs\llvm\ylib_class_info.cpp ${{ github.workspace }}\build_vs2022_x86
        cd build_vs2022_x86
        cmake .. -G "Visual Studio 17 2022" -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH="${{ github.workspace }}\third_part\build\install"
        cmake --build . --config Release --target install

    - name: package
      run: |
        cd build_vs2022_x86/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip  

  windows_vs2022_x64:
    needs: [prepare_release, generate-info]
    runs-on: windows-latest
    steps:
    - name: Checkout yLib
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Setup MSVC
      uses: microsoft/setup-msvc-dev@v1
      with:
        architecture: x64

    - name: Build Third-Party Dependencies (CMake)
      shell: cmd
      run: |
        cd third_part
        mkdir build_v143_x64 && cd build_v143_x64
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\third_part\build\install"
        cmake --build . --config Release

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      shell: cmd
      run: |
        mkdir build_vs2022_x64
        cp ${{ github.workspace }}\docs\llvm\ylib_class_info.cpp ${{ github.workspace }}\build_vs2022_x64
        cd build_vs2022_x64
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH="${{ github.workspace }}\third_part\build\install"
        cmake --build . --config Release --target install

    - name: package
      run: |
        cd build_vs2022_x64/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip  

  android_aarch64_v8a:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout yLib
      uses: actions/checkout@v4

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e

    - name: Setup Build Environment
      run: |
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
                 -DANDROID_ABI=arm64-v8a \
                 -DANDROID_PLATFORM=android-21
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DBUILD_YLIB_ARCH=aarch64 -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip    

  android_armeabi_v7a:
    needs: [prepare_release, generate-info]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout yLib
      uses: actions/checkout@v4

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e

    - name: Setup Build Environment
      run: |
        mkdir -p build

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_x64 && cd build_linux_x64
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
                 -DANDROID_ABI=armeabi-v7a \
                 -DANDROID_PLATFORM=android-21
        cmake --build .

    - name: Restore Class Info Cache
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}

    - name: build ylib
      working-directory: build
      run: |
        cp ${{ github.workspace }}/docs/llvm/ylib_class_info.cpp .
        cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI="armeabi-v7a" -DANDROID_PLATFORM=android-21 -DBUILD_YLIB_ARCH=armeabi -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip   

  release_ylib:
    needs: [prepare_release, full_source, linux_x64_gcc, linux_x86_gcc, linux_armeabi_gcc, linux_armeabihf_gcc, linux_aarch64_gcc, windows_vs2022_x64, windows_vs2022_x86, android_aarch64_v8a, android_armeabi_v7a]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}
        release_name: Release ${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}
        draft: false
        prerelease: false

    - name: upload-full-source
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        asset_content_type: application/zip

    - name: upload-linux_x64_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_x86_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        asset_content_type: application/zip


    - name: upload-linux_armeabi_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_armeabihf_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_aarch64_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip
        asset_content_type: application/zip

    - name: upload-vs2022_x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip
        asset_content_type: application/zip

    - name: upload-vs2022_x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip
        asset_content_type: application/zip

    - name: upload-android_aarch64_v8a
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        asset_content_type: application/zip

    - name: upload-android_armeabi_v7a
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        asset_content_type: application/zip