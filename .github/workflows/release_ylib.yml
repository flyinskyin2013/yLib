name: ReleaseyLib
on:
  push:
    # Sequence of patterns matched against refs/heads
    tags:
      - 'V*'

jobs:
  prepare_release:
    name: prepare_release
    runs-on: ubuntu-latest
    outputs:
      YLIB_RELEASE_VERSION: ${{ steps.set_version.outputs.YLIB_RELEASE_VERSION }}
    steps:
    - name: set-version
      id: set_version
      # regx
      run: echo ::set-output name=YLIB_RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}
  
  full_source:
    needs: [prepare_release]
    name: full_source
    runs-on: ubuntu-latest
    steps:
    - name: check out my rep
      uses: actions/checkout@v1

    - name: package
      run: |
        rm -rf .git
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip

  linux_x64_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All

      working-directory: /home/runner/work/yLib/yLib

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_x64_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=x86_64 -DENABLE_GNU_SANITIZER=OFF ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip    

  linux_x86_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib


    - name: update
      run: sudo apt-get update

    - name: install gcc multilib
      run: sudo apt-get install gcc-multilib g++-multilib

      working-directory: /home/runner/work/yLib/yLib

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All

      working-directory: /home/runner/work/yLib/yLib

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_x64_gcc_m32.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=x86 ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip   



  linux_armeabi_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib

    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi     

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All armeabi linux

      working-directory: /home/runner/work/yLib/yLib           

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_armgnueabi_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=armeabi -DENABLE_GNU_SANITIZER=OFF ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf        
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip    

  linux_armeabihf_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib

    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabihf   

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All armeabihf linux

      working-directory: /home/runner/work/yLib/yLib           

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_armgnueabihf_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=armeabihf -DENABLE_GNU_SANITIZER=OFF ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip     

  linux_aarch64_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib

    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-aarch64-linux-gnu  

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All aarch64 linux

      working-directory: /home/runner/work/yLib/yLib           

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_aarch64_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=aarch64 -DENABLE_GNU_SANITIZER=OFF ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip     



  windows_vs2015_x86:
    needs: [prepare_release]
    runs-on: windows-2019
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86      

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2015_x86
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2015 x86

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2015_x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86 ..
        cmake --build . --config Release --target install      

    - name: package
      run: |
        cd build_vs2015_x86/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86.zip  

  windows_vs2015_x64:
    needs: [prepare_release]
    runs-on: windows-2019
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
        
    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2015_x64
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2015 x86_64 

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2015_x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86_64 ..
        cmake --build . --config Release --target install  

    - name: package
      run: |
        cd build_vs2015_x64/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64.zip  

  windows_vs2017_x86:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86


    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2017_x86
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2017 x86

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2017_x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86 ..
        cmake --build . --config Release --target install      

    - name: package
      run: |
        cd build_vs2017_x86/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86.zip  

  windows_vs2017_x64:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2017_x64
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2017 x86_64 

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2017_x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86_64 ..
        cmake --build . --config Release --target install  

    - name: package
      run: |
        cd build_vs2017_x64/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64.zip  

  windows_vs2019_x86:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86      

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2019_x86
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2019 x86

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2019_x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86 ..
        cmake --build . --config Release --target install      

    - name: package
      run: |
        cd build_vs2019_x86/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86.zip  

  windows_vs2019_x64:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2019_x64
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2019 x86_64 

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2019_x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86_64 ..
        cmake --build . --config Release --target install  

    - name: package
      run: |
        cd build_vs2019_x64/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64.zip  

  windows_vs2022_x86:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_x86      

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2022_x86
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2022 x86

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2022_x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86 ..
        cmake --build . --config Release --target install      

    - name: package
      run: |
        cd build_vs2022_x86/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip  

  windows_vs2022_x64:
    needs: [prepare_release]
    runs-on: windows-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: Configure build for amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        $download_ps_file = "${{github.workspace}}/download_third_part.ps1"
        cd third_part
        powershell $download_ps_file
        cd ..
        mkdir build_vs2022_x64
        ls 

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: D:\a\yLib\yLib\third_part
      run: |
        .\build_deps.bat vs2022 x86_64 

      working-directory: D:\a\yLib\yLib\

    - name: build ylib
      working-directory: D:\a\yLib\yLib\
      run: |
        cd build_vs2022_x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_YLIB_ARCH=x86_64 ..
        cmake --build . --config Release --target install  

    - name: package
      run: |
        cd build_vs2022_x64/install
        rm examples/ -r -force
        rm tests/ -r -force
        rm -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip -force -ErrorAction SilentlyContinue
        7z -tzip a -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip  


    linux_x64_gcc:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: set env and init
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        echo $GITHUB_WORKSPACE
        ls $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE
        chmod +x build_deps.sh
        mkdir -p build
        
      working-directory: /home/runner/work/yLib/yLib

    - name: build third part
      env:
        THIRD_PART_PATH_ROOT: /home/runner/work/yLib/yLib/third_part
      run: |
        cd $GITHUB_WORKSPACE
        ./build_deps.sh All

      working-directory: /home/runner/work/yLib/yLib

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/linux_x64_gcc.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=`pwd`/install -DBUILD_YLIB_ARCH=x86_64 -DENABLE_GNU_SANITIZER=OFF ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip    



  android_aarch64_v8a:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DCMAKE_BUILD_TYPE=Release -DBUILD_YLIB_ARCH=android ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip    

  android_armeabi_v7a:
    needs: [prepare_release]
    runs-on: ubuntu-latest
    steps:
    - name: checkout my rep
      uses: actions/checkout@v2

    - name: build ylib
      working-directory: /home/runner/work/yLib/yLib/build
      run: |
        cmake -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" -DANDROID_ABI="armeabi-v7a" -DANDROID_PLATFORM=android-21 -DCMAKE_BUILD_TYPE=Release -DBUILD_YLIB_ARCH=android ..
        make -j`nproc`
        make install

    - name: package
      run: |
        cd build/install
        rm examples/ -rf
        rm tests/ -rf
        rm -f /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        zip -9 -r /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip .

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a
        path: /tmp/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip   



  release_ylib:
    needs: [prepare_release, full_source, linux_x64_gcc, linux_x86_gcc, linux_armeabi_gcc, linux_armeabihf_gcc, linux_aarch64_gcc, windows_vs2015_x64, windows_vs2015_x86, windows_vs2017_x64, windows_vs2017_x86, windows_vs2019_x64, windows_vs2019_x86, windows_vs2022_x64, windows_vs2022_x86, android_aarch64_v8a, android_armeabi_v7a]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}
        release_name: Release ${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}
        draft: false
        prerelease: false

    - name: upload-full-source
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-full-source.zip
        asset_content_type: application/zip

    - name: upload-linux_x64_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x64_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_x86_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_x86_gcc.zip
        asset_content_type: application/zip


    - name: upload-linux_armeabi_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabi_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_armeabihf_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_armeabihf_gcc.zip
        asset_content_type: application/zip

    - name: upload-linux_aarch64_gcc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-aarch64_gcc_7_5.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-linux_aarch64_gcc.zip
        asset_content_type: application/zip


    - name: upload-vs2015_x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x86.zip
        asset_content_type: application/zip

    - name: upload-vs2015_x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2015_x64.zip
        asset_content_type: application/zip

    - name: upload-vs2017_x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x86.zip
        asset_content_type: application/zip

    - name: upload-vs2017_x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2017_x64.zip
        asset_content_type: application/zip

    - name: upload-vs2019_x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x86.zip
        asset_content_type: application/zip

    - name: upload-vs2019_x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2019_x64.zip
        asset_content_type: application/zip

    - name: upload-vs2022_x86
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x86.zip
        asset_content_type: application/zip

    - name: upload-vs2022_x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-vs2022_x64.zip
        asset_content_type: application/zip

    - name: upload-android_aarch64_v8a
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_aarch64_v8a.zip
        asset_content_type: application/zip

    - name: upload-android_armeabi_v7a
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a/ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        asset_name: ylib-${{ needs.prepare_release.outputs.YLIB_RELEASE_VERSION }}-android_armeabi_v7a.zip
        asset_content_type: application/zip