name: Linux Build Matrix

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  generate-info:
    name: Generate Class Info
    uses: ./.github/workflows/class_info.yml

  build:
    needs: generate-info
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "x64-gcc"
            arch: "x64"
            compiler: "gcc"
            runner: "ubuntu-latest"
            apt_packages: ""
            toolchain_file: "toolchains/linux_x64_gcc.cmake"
            build_dir: "build_linux_x64"
            build_deps_arch: "x64"

          - name: "x64-clang"
            arch: "x64"
            compiler: "clang"
            runner: "ubuntu-latest"
            apt_packages: "clang"
            toolchain_file: "toolchains/linux_x64_clang.cmake"
            build_dir: "build_linux_x64_clang"
            build_deps_arch: "x64"

          - name: "x86-gcc"
            arch: "x86"
            compiler: "gcc"
            runner: "ubuntu-latest"
            apt_packages: "gcc-multilib g++-multilib"
            toolchain_file: "toolchains/linux_x64_gcc_m32.cmake"
            build_dir: "build_linux_x86"
            build_deps_arch: "x86"

          - name: "x86-clang"
            arch: "x86"
            compiler: "clang"
            runner: "ubuntu-latest"
            apt_packages: "clang gcc-multilib g++-multilib"
            toolchain_file: "toolchains/linux_x64_clang_m32.cmake"
            build_dir: "build_linux_x86_clang"
            build_deps_arch: "x86"

          - name: "aarch64-gcc"
            arch: "aarch64"
            compiler: "gcc"
            runner: "ubuntu-latest"
            apt_packages: "g++-aarch64-linux-gnu"
            toolchain_file: "toolchains/linux_aarch64_gcc.cmake"
            build_dir: "build_linux_aarch64"
            build_deps_arch: "aarch64"

          - name: "arm-gnueabi-gcc"
            arch: "armeabi"
            compiler: "gcc"
            runner: "ubuntu-latest"
            apt_packages: "g++-arm-linux-gnueabi"
            toolchain_file: "toolchains/linux_armgnueabi_gcc.cmake"
            build_dir: "build_linux_armeabi"
            build_deps_arch: "armeabi"

          - name: "arm-gnueabihf-gcc"
            arch: "armeabihf"
            compiler: "gcc"
            runner: "ubuntu-latest"
            apt_packages: "g++-arm-linux-gnueabihf"
            toolchain_file: "toolchains/linux_armgnueabihf_gcc.cmake"
            build_dir: "build_linux_armeabihf"
            build_deps_arch: "armeabihf"

    steps:
    - name: Checkout yLib
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        if [ -n "${{ matrix.apt_packages }}" ]; then
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}
        fi
        # if [ "${{ matrix.compiler }}" = "clang" ]; then
        #   sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
        #   sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100
        # fi
        mkdir -p ${{ matrix.build_dir }}
        mkdir -p $GITHUB_WORKSPACE/qemu-install/

    - name: Cache and Setup QEMU
      if: startsWith(matrix.arch, 'arm') || matrix.arch == 'aarch64'
      uses: actions/cache@v4
      id: cache-qemu
      with:
        path: qemu-install
        key: qemu-${{ matrix.arch }}-install-cache

    - name: Build QEMU
      if: (startsWith(matrix.arch, 'arm') || matrix.arch == 'aarch64') && steps.cache-qemu.outputs.cache-hit != 'true'
      run: |
        QEMU_TARGET="aarch64-linux-user"
        if [ "${{ matrix.arch }}" != "aarch64" ]; then
          QEMU_TARGET="arm-linux-user"
        fi
        sudo apt-get install -y ninja-build libglib2.0-dev
        git clone --depth 1 --branch v5.2.0 https://github.com/qemu/qemu.git
        cd qemu
        mkdir build && cd build
        ../configure --prefix=$(pwd)/install --target-list=${QEMU_TARGET} --disable-system --disable-werror
        make -j$(nproc)
        make install
        cp -r install/* $GITHUB_WORKSPACE/qemu-install/

    - name: Build Third-Party Dependencies (CMake)
      working-directory: third_part
      run: |
        mkdir build_linux_${{ matrix.build_deps_arch }} && cd build_linux_${{ matrix.build_deps_arch }}
        cmake .. -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/third_part/build_linux_${{ matrix.build_deps_arch }}/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/${{matrix.toolchain_file}} \
                 -DBUILD_YLIB_ARCH=${{matrix.build_deps_arch}}
        cmake --build .

    - name: Cache Class Info
      uses: actions/cache@v4
      id: restore-cache
      with:
        path: docs/llvm/ylib_class_info.cpp
        key: ylib-class-info-${{ github.sha }}
        restore-keys: |
          ylib-class-info-

    - name: Build yLib
      working-directory: ${{ matrix.build_dir }}
      run: |
        if [ "${{ steps.restore-cache.outputs.cache-hit }}" != "true" ]; then
          echo "Error: Class info cache not found. The 'generate-info' job might have failed."
          exit 1
        fi
        cp $GITHUB_WORKSPACE/docs/llvm/ylib_class_info.cpp $GITHUB_WORKSPACE/${{ matrix.build_dir }}
        cmake .. -G "Unix Makefiles" \
                 -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
                 -DCMAKE_PREFIX_PATH=${{ github.workspace }}/third_part/build/install \
                 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/${{matrix.toolchain_file}} \
                 -DBUILD_YLIB_ARCH=${{matrix.build_deps_arch}}
        make -j$(nproc)
        make install

    - name: Run Tests
      working-directory: ${{ matrix.build_dir }}
      run: |
        if [ "${{ matrix.arch }}" = "x64" ] || [ "${{ matrix.arch }}" = "x86" ]; then
          cd install/tests
          ./scripts_for_tests.sh
        elif [ "${{ matrix.arch }}" = "aarch64" ]
        then
          export PATH=$GITHUB_WORKSPACE/qemu-install/bin:$PATH
          cd install/tests
          QEMU_BIN="qemu-${{ matrix.arch }}"
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            QEMU_BIN="qemu-aarch64"
          elif [ "${{ matrix.arch }}" = "armeabi" ]; then
            QEMU_BIN="qemu-arm"
          elif [ "${{ matrix.arch }}" = "armeabihf" ]; then
            QEMU_BIN="qemu-arm"
          fi
          ./scripts_for_tests.sh ${QEMU_BIN}
        else
          echo "This arch(${{ matrix.arch }}) don't support test."
        fi