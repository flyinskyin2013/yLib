yLexicalAnalyzer

RegularExpressionEngine:

Regular to Abstract Syntax Tree
https://zhuanlan.zhihu.com/p/54291684

调度场算法（Shunting Yard Algorithm, author : Edsger Dijkstra）是一个用于将中缀表达式转换为后缀表达式的经典算法，由艾兹格·迪杰斯特拉引入，因其操作类似于火车编组场而得名

逆波兰式（Reverse Polish notation，RPN，或逆波兰记法），也叫后缀表达式（将运算符写在操作数之后）

Thompson:(Thompson构造法在计算机科学中是指一个能将正则表达式转化为一个与之等价的非确定有限状态自动机（NFA）的算法。)
	Paper:(Ken Thompson, “Regular expression search algorithm,” Communications of the ACM 11(6) (June 1968), pp. 419–422. http://doi.acm.org/10.1145/363347.363387 (PDF))
    https://swtch.com/~rsc/regexp/regexp1.html
    https://blog.csdn.net/tyler_download/article/details/53033180
    https://blog.csdn.net/tyler_download/article/details/51382346


NFA转DFA的子集构造(subset construction)算法
    https://www.jianshu.com/p/8e0fb9cf3f49


正则表达式的功能概括讲主要有四个：

匹配给定的文本。
通过正则表达式，可以提取我们期望得到的文本。
替换指定的文本。
根据给定的文本，将字符串切分成多个子串。


普通字符:

    [ABC]  ------> 匹配[...]中的所有字符

    [^ABC] ------> 匹配除了[...]中字符的所有字符

    [A-Z]  ------> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母

    .      ------> 匹配除换行符（\n、\r）之外的任何单个字符，相等于[^\n\r]

    [\s\S] ------> 匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行

    \w     ------> 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]

非打印字符:

    \cx	 ------> 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。

    \f	 ------> 匹配一个换页符。等价于 \x0c 和 \cL。

    \n	 ------> 匹配一个换行符。等价于 \x0a 和 \cJ。

    \r	 ------> 匹配一个回车符。等价于 \x0d 和 \cM。

    \s	 ------> 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。

    \S	 ------> 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。

    \t	 ------> 匹配一个制表符。等价于 \x09 和 \cI。

    \v	 ------> 匹配一个垂直制表符。等价于 \x0b 和 \cK。

特殊字符: 特殊含义的字符

    $	 ------> 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。

    ( )	 ------> 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。

    *	 ------> 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。

    +	 ------> 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。

    .	 ------> 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。

    [	 ------> 标记一个中括号表达式的开始。要匹配 [，请使用 \[。

    ?	 ------> 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。

    \	 ------> 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。

    ^	 ------> 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^。

    {	 ------> 标记限定符表达式的开始。要匹配 {，请使用 \{。

    |	 ------> 指明两项之间的一个选择。要匹配 |，请使用 \|。

限定符: 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。

    *	   ------> 匹配前面的子表达式零次或多次。

    +	   ------> 匹配前面的子表达式一次或多次。

    ?	   ------> 匹配前面的子表达式零次或一次。

    {n}	   ------> n 是一个非负整数。匹配确定的 n 次。

    {n,}   ------> n 是一个非负整数。至少匹配n 次。

    {n,m}  ------> m 和 n 均为非负整数，其中n <= m。



Warnning:

    * 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。

    通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪婪"表达式转换为"非贪婪"表达式或者最小匹配。
